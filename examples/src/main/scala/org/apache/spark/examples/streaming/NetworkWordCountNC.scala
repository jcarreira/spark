/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.examples.streaming

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, Milliseconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.storage.StorageLevel

import scala.collection.mutable.Set;
import scala.collection.mutable.HashSet;

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: NetworkWordCountNC
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example org.apache.spark.examples.streaming.NetworkWordCountNC`
 */
object NetworkWordCountNC {
  def main(args: Array[String]) {
    if (args.length != 3) {
      System.err.println("Usage: NetworkWordCountNC <window milliseconds>" +
                         "<receives_per_node> <number_of_nodes>")
      System.exit(1)
    }

    StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("NetworkWordCountNC")
                                   .set("spark.eventLog.enabled", "true")
    val ssc = new StreamingContext(sparkConf, Milliseconds(args(0).toInt))
                                    

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.

    val host_port_set = new HashSet[(String,Int)];

           
    var hosts = Array("f1", "f2", "f3", "f4", "f5", "f6", "f7", 
                      "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15")

    (0 to args(2).toInt).foreach(node_id =>
        (1 to args(1).toInt).foreach(port => host_port_set += ((hosts(node_id), port + 9999)) ));

//hosts.foreach(host => (1 to args(1).toInt).foreach(
//                           port => host_port_set += ((host, port + 9999)) ));

    val rawStreams = host_port_set.map(host_port => 
                     ssc.socketTextStream(host_port._1, host_port._2, 
                            StorageLevel.MEMORY_ONLY_SER)).toArray
        
    val union = ssc.union(rawStreams);
    
    val words = union.flatMap(_.split(" "))
    //val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    words.print()
    ssc.start()
    ssc.awaitTermination()
  }
}

